// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ohmium.Repository;

#nullable disable

namespace Ohmium.Repository.Migrations
{
    [DbContext(typeof(SensorContext))]
    partial class SensorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ohmium.Models.EFModels.Address", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("postalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("sid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("sid")
                        .IsUnique();

                    b.ToTable("address");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.ColorConfig", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("colorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sensorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("colorConfig");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.Contact", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("contactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("siteID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("siteID");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.Device", b =>
                {
                    b.Property<string>("EqMfgID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EqDes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("comStatus")
                        .HasColumnType("bit");

                    b.Property<Guid>("configID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("createdBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("dCmd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("h2Production")
                        .HasColumnType("real");

                    b.Property<float?>("hxT")
                        .HasColumnType("real");

                    b.Property<string>("isRunning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("lastDataReceivedOn")
                        .HasColumnType("datetime2");

                    b.Property<float?>("mnWbT")
                        .HasColumnType("real");

                    b.Property<float?>("mxWbT")
                        .HasColumnType("real");

                    b.Property<int>("nStack")
                        .HasColumnType("int");

                    b.Property<float>("powerConsumption")
                        .HasColumnType("real");

                    b.Property<float>("siteEfficiency")
                        .HasColumnType("real");

                    b.Property<Guid>("siteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("status")
                        .HasColumnType("int");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("updatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ver")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EqMfgID");

                    b.HasIndex("configID");

                    b.HasIndex("siteID");

                    b.HasIndex("status");

                    b.ToTable("device");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.DeviceData", b =>
                {
                    b.Property<Guid>("transID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short?>("CommStatus")
                        .HasColumnType("smallint");

                    b.Property<float?>("HYS")
                        .HasColumnType("real");

                    b.Property<Guid>("configID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("deviceID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("hxiT")
                        .HasColumnType("real");

                    b.Property<float?>("hxoT")
                        .HasColumnType("real");

                    b.Property<string>("siteID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("verM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("wC")
                        .HasColumnType("real");

                    b.Property<float?>("wL")
                        .HasColumnType("real");

                    b.Property<float?>("wP")
                        .HasColumnType("real");

                    b.Property<float?>("wPp")
                        .HasColumnType("real");

                    b.Property<float?>("wT")
                        .HasColumnType("real");

                    b.HasKey("transID");

                    b.HasIndex("deviceID");

                    b.ToTable("deviceData");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.DeviceTemplateAllocation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("deviceID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("rptid")
                        .HasColumnType("int");

                    b.Property<string>("stackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("stackRunProfileTemplateID")
                        .HasColumnType("int");

                    b.Property<int>("templateID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("deviceID");

                    b.HasIndex("rptid");

                    b.HasIndex("stackID");

                    b.HasIndex("stackRunProfileTemplateID");

                    b.ToTable("deviceTemplateAllocation");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.EquipmentConfiguration", b =>
                {
                    b.Property<Guid>("equipmentConfigID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("colorConfig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("configName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createdBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("equipmentConfiguration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("equipmentConfigID");

                    b.ToTable("equipmentConfiguration");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.Feedback", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dstamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("user")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("feedback");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.LotusDeviceData", b =>
                {
                    b.Property<Guid>("transID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("configID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("scSn")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("siteID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ver")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("transID");

                    b.HasIndex("scSn");

                    b.ToTable("lotusDeviceData");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.LotusModels.LotusTemp", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("data")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("lotusTempdata");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.LotusModels.StacksThatRan", b =>
                {
                    b.Property<string>("stackID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("deviceID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.HasKey("stackID", "deviceID");

                    b.ToTable("StacksThatRan");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.MTSDeviceData", b =>
                {
                    b.Property<string>("deviceID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("datetime2");

                    b.Property<short?>("CommStatus")
                        .HasColumnType("smallint");

                    b.Property<float?>("HYS")
                        .HasColumnType("real");

                    b.Property<Guid>("configID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("hxiT")
                        .HasColumnType("real");

                    b.Property<float?>("hxoT")
                        .HasColumnType("real");

                    b.Property<string>("siteID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("ver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("verM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("wC")
                        .HasColumnType("real");

                    b.Property<float?>("wL")
                        .HasColumnType("real");

                    b.Property<float?>("wP")
                        .HasColumnType("real");

                    b.Property<float?>("wPp")
                        .HasColumnType("real");

                    b.Property<float?>("wT")
                        .HasColumnType("real");

                    b.HasKey("deviceID", "timeStamp");

                    b.ToTable("mtsDeviceData");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.MTSDeviceDataNew", b =>
                {
                    b.Property<string>("deviceID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("datetime2");

                    b.Property<short?>("CommStatus")
                        .HasColumnType("smallint");

                    b.Property<float?>("HYS")
                        .HasColumnType("real");

                    b.Property<Guid>("configID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("hxiT")
                        .HasColumnType("real");

                    b.Property<float?>("hxoT")
                        .HasColumnType("real");

                    b.Property<string>("siteID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("ver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("verM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("wC")
                        .HasColumnType("real");

                    b.Property<float?>("wL")
                        .HasColumnType("real");

                    b.Property<float?>("wP")
                        .HasColumnType("real");

                    b.Property<float?>("wPp")
                        .HasColumnType("real");

                    b.Property<float?>("wT")
                        .HasColumnType("real");

                    b.HasKey("deviceID", "timeStamp");

                    b.ToTable("mtsDeviceDataNew");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.MTSDeviceDataNew2", b =>
                {
                    b.Property<string>("deviceID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("datetime2");

                    b.Property<short?>("CommStatus")
                        .HasColumnType("smallint");

                    b.Property<float?>("HYS")
                        .HasColumnType("real");

                    b.Property<Guid>("configID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("hxiT")
                        .HasColumnType("real");

                    b.Property<float?>("hxoT")
                        .HasColumnType("real");

                    b.Property<string>("siteID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("ver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("verM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("wC")
                        .HasColumnType("real");

                    b.Property<float?>("wL")
                        .HasColumnType("real");

                    b.Property<float?>("wP")
                        .HasColumnType("real");

                    b.Property<float?>("wPp")
                        .HasColumnType("real");

                    b.Property<float?>("wT")
                        .HasColumnType("real");

                    b.HasKey("deviceID", "timeStamp");

                    b.ToTable("mtsDeviceDataNew2");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.MTSStackData", b =>
                {
                    b.Property<string>("deviceID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("stackMfgID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("datetime2");

                    b.Property<float?>("CD")
                        .HasColumnType("real");

                    b.Property<float?>("cM1")
                        .HasColumnType("real");

                    b.Property<float?>("cM2")
                        .HasColumnType("real");

                    b.Property<float?>("cM3")
                        .HasColumnType("real");

                    b.Property<float?>("cM4")
                        .HasColumnType("real");

                    b.Property<float?>("cM5")
                        .HasColumnType("real");

                    b.Property<float?>("cR1")
                        .HasColumnType("real");

                    b.Property<float?>("cR2")
                        .HasColumnType("real");

                    b.Property<float?>("cR3")
                        .HasColumnType("real");

                    b.Property<float?>("cR4")
                        .HasColumnType("real");

                    b.Property<float?>("cR5")
                        .HasColumnType("real");

                    b.Property<float?>("cR6")
                        .HasColumnType("real");

                    b.Property<float?>("cV1")
                        .HasColumnType("real");

                    b.Property<float?>("cV2")
                        .HasColumnType("real");

                    b.Property<float?>("cV3")
                        .HasColumnType("real");

                    b.Property<float?>("cV4")
                        .HasColumnType("real");

                    b.Property<float?>("cV5")
                        .HasColumnType("real");

                    b.Property<float?>("cV6")
                        .HasColumnType("real");

                    b.Property<float?>("cX1")
                        .HasColumnType("real");

                    b.Property<float?>("cX2")
                        .HasColumnType("real");

                    b.Property<float?>("cX3")
                        .HasColumnType("real");

                    b.Property<float?>("cX4")
                        .HasColumnType("real");

                    b.Property<float?>("cX5")
                        .HasColumnType("real");

                    b.Property<float?>("cumulativeHours")
                        .HasColumnType("real");

                    b.Property<float?>("hP")
                        .HasColumnType("real");

                    b.Property<float?>("hT")
                        .HasColumnType("real");

                    b.Property<float?>("imA")
                        .HasColumnType("real");

                    b.Property<float?>("imF")
                        .HasColumnType("real");

                    b.Property<string>("interLock")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("isF")
                        .HasColumnType("real");

                    b.Property<int?>("loopcnt")
                        .HasColumnType("int");

                    b.Property<string>("position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("psI")
                        .HasColumnType("real");

                    b.Property<float?>("psV")
                        .HasColumnType("real");

                    b.Property<float?>("runHours")
                        .HasColumnType("real");

                    b.Property<float?>("scriptLoopCnt")
                        .HasColumnType("real");

                    b.Property<float?>("scriptStep")
                        .HasColumnType("real");

                    b.Property<float?>("seqLoopCnt")
                        .HasColumnType("real");

                    b.Property<string>("seqName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("seqStep")
                        .HasColumnType("real");

                    b.Property<string>("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("status")
                        .HasColumnType("int");

                    b.Property<int?>("stepNumber")
                        .HasColumnType("int");

                    b.Property<float?>("wF")
                        .HasColumnType("real");

                    b.Property<float?>("wP")
                        .HasColumnType("real");

                    b.Property<float?>("wT")
                        .HasColumnType("real");

                    b.HasKey("deviceID", "stackMfgID", "timeStamp");

                    b.ToTable("mtsStackData");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.MTSStackDataNew", b =>
                {
                    b.Property<string>("deviceID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("stackMfgID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("datetime2");

                    b.Property<float?>("CD")
                        .HasColumnType("real");

                    b.Property<float?>("cM1")
                        .HasColumnType("real");

                    b.Property<float?>("cM2")
                        .HasColumnType("real");

                    b.Property<float?>("cM3")
                        .HasColumnType("real");

                    b.Property<float?>("cM4")
                        .HasColumnType("real");

                    b.Property<float?>("cM5")
                        .HasColumnType("real");

                    b.Property<float?>("cR1")
                        .HasColumnType("real");

                    b.Property<float?>("cR2")
                        .HasColumnType("real");

                    b.Property<float?>("cR3")
                        .HasColumnType("real");

                    b.Property<float?>("cR4")
                        .HasColumnType("real");

                    b.Property<float?>("cR5")
                        .HasColumnType("real");

                    b.Property<float?>("cR6")
                        .HasColumnType("real");

                    b.Property<float?>("cV1")
                        .HasColumnType("real");

                    b.Property<float?>("cV2")
                        .HasColumnType("real");

                    b.Property<float?>("cV3")
                        .HasColumnType("real");

                    b.Property<float?>("cV4")
                        .HasColumnType("real");

                    b.Property<float?>("cV5")
                        .HasColumnType("real");

                    b.Property<float?>("cV6")
                        .HasColumnType("real");

                    b.Property<float?>("cX1")
                        .HasColumnType("real");

                    b.Property<float?>("cX2")
                        .HasColumnType("real");

                    b.Property<float?>("cX3")
                        .HasColumnType("real");

                    b.Property<float?>("cX4")
                        .HasColumnType("real");

                    b.Property<float?>("cX5")
                        .HasColumnType("real");

                    b.Property<float?>("cumulativeHours")
                        .HasColumnType("real");

                    b.Property<float?>("hP")
                        .HasColumnType("real");

                    b.Property<float?>("hT")
                        .HasColumnType("real");

                    b.Property<float?>("imA")
                        .HasColumnType("real");

                    b.Property<float?>("imF")
                        .HasColumnType("real");

                    b.Property<string>("interLock")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("isF")
                        .HasColumnType("real");

                    b.Property<int?>("loopcnt")
                        .HasColumnType("int");

                    b.Property<string>("position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("psI")
                        .HasColumnType("real");

                    b.Property<float?>("psV")
                        .HasColumnType("real");

                    b.Property<float?>("runHours")
                        .HasColumnType("real");

                    b.Property<float?>("scriptLoopCnt")
                        .HasColumnType("real");

                    b.Property<float?>("scriptStep")
                        .HasColumnType("real");

                    b.Property<float?>("seqLoopCnt")
                        .HasColumnType("real");

                    b.Property<string>("seqName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("seqStep")
                        .HasColumnType("real");

                    b.Property<string>("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("status")
                        .HasColumnType("int");

                    b.Property<int?>("stepNumber")
                        .HasColumnType("int");

                    b.Property<float?>("wF")
                        .HasColumnType("real");

                    b.Property<float?>("wP")
                        .HasColumnType("real");

                    b.Property<float?>("wT")
                        .HasColumnType("real");

                    b.HasKey("deviceID", "stackMfgID", "timeStamp");

                    b.ToTable("mtsStackDataNew");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.MTSStackDataNew2", b =>
                {
                    b.Property<string>("deviceID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("stackMfgID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("datetime2");

                    b.Property<float?>("CD")
                        .HasColumnType("real");

                    b.Property<float?>("cM1")
                        .HasColumnType("real");

                    b.Property<float?>("cM2")
                        .HasColumnType("real");

                    b.Property<float?>("cM3")
                        .HasColumnType("real");

                    b.Property<float?>("cM4")
                        .HasColumnType("real");

                    b.Property<float?>("cM5")
                        .HasColumnType("real");

                    b.Property<float?>("cR1")
                        .HasColumnType("real");

                    b.Property<float?>("cR2")
                        .HasColumnType("real");

                    b.Property<float?>("cR3")
                        .HasColumnType("real");

                    b.Property<float?>("cR4")
                        .HasColumnType("real");

                    b.Property<float?>("cR5")
                        .HasColumnType("real");

                    b.Property<float?>("cR6")
                        .HasColumnType("real");

                    b.Property<float?>("cV1")
                        .HasColumnType("real");

                    b.Property<float?>("cV2")
                        .HasColumnType("real");

                    b.Property<float?>("cV3")
                        .HasColumnType("real");

                    b.Property<float?>("cV4")
                        .HasColumnType("real");

                    b.Property<float?>("cV5")
                        .HasColumnType("real");

                    b.Property<float?>("cV6")
                        .HasColumnType("real");

                    b.Property<float?>("cX1")
                        .HasColumnType("real");

                    b.Property<float?>("cX2")
                        .HasColumnType("real");

                    b.Property<float?>("cX3")
                        .HasColumnType("real");

                    b.Property<float?>("cX4")
                        .HasColumnType("real");

                    b.Property<float?>("cX5")
                        .HasColumnType("real");

                    b.Property<float?>("cumulativeHours")
                        .HasColumnType("real");

                    b.Property<float?>("hP")
                        .HasColumnType("real");

                    b.Property<float?>("hT")
                        .HasColumnType("real");

                    b.Property<float?>("imA")
                        .HasColumnType("real");

                    b.Property<float?>("imF")
                        .HasColumnType("real");

                    b.Property<string>("interLock")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("isF")
                        .HasColumnType("real");

                    b.Property<int?>("loopcnt")
                        .HasColumnType("int");

                    b.Property<string>("position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("psI")
                        .HasColumnType("real");

                    b.Property<float?>("psV")
                        .HasColumnType("real");

                    b.Property<float?>("runHours")
                        .HasColumnType("real");

                    b.Property<float?>("scriptLoopCnt")
                        .HasColumnType("real");

                    b.Property<float?>("scriptStep")
                        .HasColumnType("real");

                    b.Property<float?>("seqLoopCnt")
                        .HasColumnType("real");

                    b.Property<string>("seqName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("seqStep")
                        .HasColumnType("real");

                    b.Property<string>("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("status")
                        .HasColumnType("int");

                    b.Property<int?>("stepNumber")
                        .HasColumnType("int");

                    b.Property<float?>("wF")
                        .HasColumnType("real");

                    b.Property<float?>("wP")
                        .HasColumnType("real");

                    b.Property<float?>("wT")
                        .HasColumnType("real");

                    b.HasKey("deviceID", "stackMfgID", "timeStamp");

                    b.ToTable("mtsStackDataNew2");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.MinMaxParams", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("equipment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("max")
                        .HasColumnType("real");

                    b.Property<float>("min")
                        .HasColumnType("real");

                    b.Property<string>("sensorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("mmp");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.Org", b =>
                {
                    b.Property<Guid>("OrgID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrgName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("createdBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("OrgID");

                    b.ToTable("org");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.Region", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("desc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("name");

                    b.ToTable("region");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.RunProfile", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("dCmd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("fan")
                        .HasColumnType("bit");

                    b.Property<float?>("hxT")
                        .HasColumnType("real");

                    b.Property<float?>("mnWbT")
                        .HasColumnType("real");

                    b.Property<float?>("mxWbT")
                        .HasColumnType("real");

                    b.Property<string>("profileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("pump")
                        .HasColumnType("bit");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("deviceID");

                    b.ToTable("runProfile");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.RunProfileTemplate", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("dCmd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("fan")
                        .HasColumnType("bit");

                    b.Property<float?>("hxT")
                        .HasColumnType("real");

                    b.Property<float?>("mnHxT")
                        .HasColumnType("real");

                    b.Property<float?>("mnWbT")
                        .HasColumnType("real");

                    b.Property<float?>("mxHxT")
                        .HasColumnType("real");

                    b.Property<float?>("mxWbT")
                        .HasColumnType("real");

                    b.Property<string>("profileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("pump")
                        .HasColumnType("bit");

                    b.Property<int?>("status")
                        .HasColumnType("int");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("datetime2");

                    b.Property<float?>("wbT")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("status");

                    b.ToTable("runProfileTemplate");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.RunStep", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<float?>("cI")
                        .HasColumnType("real");

                    b.Property<float?>("cV")
                        .HasColumnType("real");

                    b.Property<float?>("cVl")
                        .HasColumnType("real");

                    b.Property<float?>("cVt")
                        .HasColumnType("real");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<float?>("hP")
                        .HasColumnType("real");

                    b.Property<float?>("imA")
                        .HasColumnType("real");

                    b.Property<float?>("imF")
                        .HasColumnType("real");

                    b.Property<float?>("mnF")
                        .HasColumnType("real");

                    b.Property<float?>("mxF")
                        .HasColumnType("real");

                    b.Property<int?>("rstGID")
                        .HasColumnType("int");

                    b.Property<string>("sCmd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("stepNumber")
                        .HasColumnType("int");

                    b.Property<int>("stkRunProfileID")
                        .HasColumnType("int");

                    b.Property<int?>("testState")
                        .HasColumnType("int");

                    b.Property<float?>("wFt")
                        .HasColumnType("real");

                    b.Property<float?>("wP")
                        .HasColumnType("real");

                    b.Property<float?>("wTt")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("rstGID");

                    b.HasIndex("stkRunProfileID");

                    b.ToTable("stkStep");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.RunStepTemplate", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<float?>("cI")
                        .HasColumnType("real");

                    b.Property<float?>("cV")
                        .HasColumnType("real");

                    b.Property<float?>("cVl")
                        .HasColumnType("real");

                    b.Property<float?>("cVt")
                        .HasColumnType("real");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<float?>("hP")
                        .HasColumnType("real");

                    b.Property<float?>("imA")
                        .HasColumnType("real");

                    b.Property<float?>("imF")
                        .HasColumnType("real");

                    b.Property<float?>("mnF")
                        .HasColumnType("real");

                    b.Property<float?>("mxF")
                        .HasColumnType("real");

                    b.Property<int?>("rstGID")
                        .HasColumnType("int");

                    b.Property<string>("sCmd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("status")
                        .HasColumnType("int");

                    b.Property<int>("stepNumber")
                        .HasColumnType("int");

                    b.Property<int>("stkRunProfileID")
                        .HasColumnType("int");

                    b.Property<int>("testState")
                        .HasColumnType("int");

                    b.Property<float?>("wFt")
                        .HasColumnType("real");

                    b.Property<float?>("wP")
                        .HasColumnType("real");

                    b.Property<float?>("wTt")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("rstGID");

                    b.HasIndex("status");

                    b.HasIndex("stkRunProfileID");

                    b.HasIndex("testState");

                    b.ToTable("runStepTemplate");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.RunStepTemplateGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numLoops")
                        .HasColumnType("int");

                    b.Property<int?>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("status");

                    b.ToTable("runStepTemplateGroup");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.SYS", b =>
                {
                    b.Property<string>("scSn")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("compSn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dSn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dryerSn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lhc1Sn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lhc2Sn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lhc3Sn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lhc4Sn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lpc1Sn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lpc2Sn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lpc3Sn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lpc4Sn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ltcSn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lwcSn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("nLCC")
                        .HasColumnType("int");

                    b.Property<int>("nStack")
                        .HasColumnType("int");

                    b.Property<string>("scFn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("scHn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uc1Fn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uc1Hn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uc1Sn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uc2Fn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uc2Hn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uc2Sn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uc3Fn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uc3Hn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uc3Sn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uc4Fn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uc4Hn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uc4Sn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("scSn");

                    b.ToTable("sysMaster");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.Segment", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("segment");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.Site", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("h2Production")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("orgID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("powerConsumption")
                        .HasColumnType("real");

                    b.Property<float>("siteEfficiency")
                        .HasColumnType("real");

                    b.Property<float>("siteLat")
                        .HasColumnType("real");

                    b.Property<float>("siteLng")
                        .HasColumnType("real");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Region");

                    b.HasIndex("orgID");

                    b.ToTable("site");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.Stack", b =>
                {
                    b.Property<string>("stackMfgID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("command")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("loop")
                        .HasColumnType("bit");

                    b.Property<float>("meaArea")
                        .HasColumnType("real");

                    b.Property<int>("meaNum")
                        .HasColumnType("int");

                    b.Property<Guid>("siteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("stackConfig")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("stackPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("stackMfgID");

                    b.HasIndex("deviceID");

                    b.HasIndex("siteID");

                    b.HasIndex("status");

                    b.ToTable("stack");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.StackConfig", b =>
                {
                    b.Property<Guid>("configID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("colorConfig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("configName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("configString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("configID");

                    b.ToTable("sconfig");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.StackPhaseSetting", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("check")
                        .HasColumnType("bit");

                    b.Property<float?>("hrs")
                        .HasColumnType("real");

                    b.Property<string>("hrsminsdisplay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("loop")
                        .HasColumnType("int");

                    b.Property<float?>("mins")
                        .HasColumnType("real");

                    b.Property<int>("phase")
                        .HasColumnType("int");

                    b.Property<int?>("phaseGroup")
                        .HasColumnType("int");

                    b.Property<int?>("phaseGroupLoop")
                        .HasColumnType("int");

                    b.Property<int>("rsgid")
                        .HasColumnType("int");

                    b.Property<float?>("seconds")
                        .HasColumnType("real");

                    b.Property<string>("stackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("totalHours")
                        .HasColumnType("real");

                    b.Property<float?>("totalMins")
                        .HasColumnType("real");

                    b.Property<string>("totalhrsminsdisplay")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("rsgid");

                    b.HasIndex("stackID");

                    b.ToTable("stkPhaseSetting");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.StackPhaseSettingNew", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("SequenceListWithLoop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("phaseGroup")
                        .HasColumnType("int");

                    b.Property<int?>("phaseLoop")
                        .HasColumnType("int");

                    b.Property<string>("stackID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("stackID");

                    b.ToTable("stackPhaseSettingNew");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.StackRunProfile", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("command")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("loop")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("profileID")
                        .HasColumnType("int");

                    b.Property<string>("stackID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("stackPosition")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("profileID");

                    b.HasIndex("stackID");

                    b.ToTable("stkRunProfile");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.StackRunProfileTemplate", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("command")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("loop")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("profileID")
                        .HasColumnType("int");

                    b.Property<int?>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("profileID");

                    b.HasIndex("status");

                    b.ToTable("stackRunProfileTemplate");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.StackTestRunHours", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<float?>("cumulativeHours")
                        .HasColumnType("real");

                    b.Property<string>("stkMfgId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("timeStampUTC")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("stackTestRunHours");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.StatusType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("statusType");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.TSStackData", b =>
                {
                    b.Property<Guid>("transID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("CD")
                        .HasColumnType("real");

                    b.Property<float?>("cM1")
                        .HasColumnType("real");

                    b.Property<float?>("cM2")
                        .HasColumnType("real");

                    b.Property<float?>("cM3")
                        .HasColumnType("real");

                    b.Property<float?>("cM4")
                        .HasColumnType("real");

                    b.Property<float?>("cM5")
                        .HasColumnType("real");

                    b.Property<float?>("cR1")
                        .HasColumnType("real");

                    b.Property<float?>("cR2")
                        .HasColumnType("real");

                    b.Property<float?>("cR3")
                        .HasColumnType("real");

                    b.Property<float?>("cR4")
                        .HasColumnType("real");

                    b.Property<float?>("cR5")
                        .HasColumnType("real");

                    b.Property<float?>("cR6")
                        .HasColumnType("real");

                    b.Property<float?>("cV1")
                        .HasColumnType("real");

                    b.Property<float?>("cV2")
                        .HasColumnType("real");

                    b.Property<float?>("cV3")
                        .HasColumnType("real");

                    b.Property<float?>("cV4")
                        .HasColumnType("real");

                    b.Property<float?>("cV5")
                        .HasColumnType("real");

                    b.Property<float?>("cV6")
                        .HasColumnType("real");

                    b.Property<float?>("cX1")
                        .HasColumnType("real");

                    b.Property<float?>("cX2")
                        .HasColumnType("real");

                    b.Property<float?>("cX3")
                        .HasColumnType("real");

                    b.Property<float?>("cX4")
                        .HasColumnType("real");

                    b.Property<float?>("cX5")
                        .HasColumnType("real");

                    b.Property<string>("deviceID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float?>("hP")
                        .HasColumnType("real");

                    b.Property<float?>("hT")
                        .HasColumnType("real");

                    b.Property<float?>("imA")
                        .HasColumnType("real");

                    b.Property<float?>("imF")
                        .HasColumnType("real");

                    b.Property<float?>("isF")
                        .HasColumnType("real");

                    b.Property<int?>("loopcnt")
                        .HasColumnType("int");

                    b.Property<string>("position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("psI")
                        .HasColumnType("real");

                    b.Property<float?>("psV")
                        .HasColumnType("real");

                    b.Property<float?>("runHours")
                        .HasColumnType("real");

                    b.Property<string>("seqName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stackMfgID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("status")
                        .HasColumnType("real");

                    b.Property<int?>("stepNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("datetime2");

                    b.Property<float?>("wF")
                        .HasColumnType("real");

                    b.Property<float?>("wP")
                        .HasColumnType("real");

                    b.Property<float?>("wT")
                        .HasColumnType("real");

                    b.HasKey("transID");

                    b.HasIndex("deviceID");

                    b.HasIndex("stackMfgID");

                    b.ToTable("tsStackData");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.TestProfileConfig", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Config")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("testProfileConfig");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.TestState", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("TestDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("testStates");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.UserLogin", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("loginDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("userLogin");
                });

            modelBuilder.Entity("Ohmium.Models.TemplateModels.RunStepLibrary", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<float?>("cI")
                        .HasColumnType("real");

                    b.Property<float?>("cV")
                        .HasColumnType("real");

                    b.Property<float?>("cVlimit")
                        .HasColumnType("real");

                    b.Property<float?>("cVt")
                        .HasColumnType("real");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<float?>("hP")
                        .HasColumnType("real");

                    b.Property<float?>("imA")
                        .HasColumnType("real");

                    b.Property<float?>("imF")
                        .HasColumnType("real");

                    b.Property<float?>("mnF")
                        .HasColumnType("real");

                    b.Property<float?>("mxF")
                        .HasColumnType("real");

                    b.Property<int?>("seqMasterId")
                        .HasColumnType("int");

                    b.Property<int>("stepNumber")
                        .HasColumnType("int");

                    b.Property<float?>("wFt")
                        .HasColumnType("real");

                    b.Property<float?>("wP")
                        .HasColumnType("real");

                    b.Property<float?>("wTt")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("seqMasterId");

                    b.ToTable("runstepLibrary");
                });

            modelBuilder.Entity("Ohmium.Models.TemplateModels.ScriptLibrary", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("phaseLoop")
                        .HasColumnType("int");

                    b.Property<string>("runStepLibraryWithLoop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("scriptId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("stepNumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("scriptId");

                    b.HasIndex("status");

                    b.ToTable("scriptLibrary");
                });

            modelBuilder.Entity("Ohmium.Models.TemplateModels.ScriptList", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("scriptName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("scriptlists");
                });

            modelBuilder.Entity("Ohmium.Models.TemplateModels.SequenceLibrary", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("loopCount")
                        .HasColumnType("int");

                    b.Property<string>("sequenceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sortOrder")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("sequencyLibrary");
                });

            modelBuilder.Entity("Ohmium.Models.TemplateModels.StackSync", b =>
                {
                    b.Property<string>("stackID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<int>("scriptID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("stackID", "scriptID");

                    b.HasIndex("scriptID");

                    b.ToTable("stackSyncData");
                });

            modelBuilder.Entity("ThresholdConfig", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("colorSortOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("maxVal")
                        .HasColumnType("real");

                    b.Property<float>("minVal")
                        .HasColumnType("real");

                    b.Property<string>("paramName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("thresholdconfigs");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.Address", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.Site", "site")
                        .WithOne("address")
                        .HasForeignKey("Ohmium.Models.EFModels.Address", "sid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("site");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.Contact", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.Site", "site")
                        .WithMany("contact")
                        .HasForeignKey("siteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("site");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.Device", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.EquipmentConfiguration", "ec")
                        .WithMany()
                        .HasForeignKey("configID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ohmium.Models.EFModels.Site", "site")
                        .WithMany()
                        .HasForeignKey("siteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ohmium.Models.EFModels.StatusType", "statustype")
                        .WithMany()
                        .HasForeignKey("status");

                    b.Navigation("ec");

                    b.Navigation("site");

                    b.Navigation("statustype");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.DeviceData", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.Device", "device")
                        .WithMany()
                        .HasForeignKey("deviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("device");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.DeviceTemplateAllocation", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.Device", "device")
                        .WithMany()
                        .HasForeignKey("deviceID");

                    b.HasOne("Ohmium.Models.EFModels.RunProfileTemplate", "rpt")
                        .WithMany()
                        .HasForeignKey("rptid");

                    b.HasOne("Ohmium.Models.EFModels.Stack", "stack")
                        .WithMany()
                        .HasForeignKey("stackID");

                    b.HasOne("Ohmium.Models.EFModels.StackRunProfileTemplate", "srpt")
                        .WithMany()
                        .HasForeignKey("stackRunProfileTemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("device");

                    b.Navigation("rpt");

                    b.Navigation("srpt");

                    b.Navigation("stack");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.LotusDeviceData", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.Device", "device")
                        .WithMany()
                        .HasForeignKey("scSn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("device");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.RunProfile", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.Device", "device")
                        .WithMany()
                        .HasForeignKey("deviceID");

                    b.Navigation("device");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.RunProfileTemplate", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.StatusType", "stt")
                        .WithMany()
                        .HasForeignKey("status");

                    b.Navigation("stt");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.RunStep", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.RunStepTemplateGroup", "rstg")
                        .WithMany()
                        .HasForeignKey("rstGID");

                    b.HasOne("Ohmium.Models.EFModels.StackRunProfile", "srp")
                        .WithMany("runStep")
                        .HasForeignKey("stkRunProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("rstg");

                    b.Navigation("srp");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.RunStepTemplate", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.RunStepTemplateGroup", "rstg")
                        .WithMany()
                        .HasForeignKey("rstGID");

                    b.HasOne("Ohmium.Models.EFModels.StatusType", "stt")
                        .WithMany()
                        .HasForeignKey("status");

                    b.HasOne("Ohmium.Models.EFModels.StackRunProfileTemplate", "srp")
                        .WithMany("runStepTemplate")
                        .HasForeignKey("stkRunProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ohmium.Models.EFModels.TestState", "tState")
                        .WithMany()
                        .HasForeignKey("testState")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("rstg");

                    b.Navigation("srp");

                    b.Navigation("stt");

                    b.Navigation("tState");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.RunStepTemplateGroup", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.StatusType", "stype")
                        .WithMany()
                        .HasForeignKey("status");

                    b.Navigation("stype");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.Site", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.Region", "reg")
                        .WithMany()
                        .HasForeignKey("Region");

                    b.HasOne("Ohmium.Models.EFModels.Org", "org")
                        .WithMany()
                        .HasForeignKey("orgID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("org");

                    b.Navigation("reg");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.Stack", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.Device", "device")
                        .WithMany()
                        .HasForeignKey("deviceID");

                    b.HasOne("Ohmium.Models.EFModels.Site", "sid")
                        .WithMany()
                        .HasForeignKey("siteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ohmium.Models.EFModels.StatusType", "sStatus")
                        .WithMany()
                        .HasForeignKey("status")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("device");

                    b.Navigation("sStatus");

                    b.Navigation("sid");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.StackPhaseSetting", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.RunStepTemplateGroup", "rsg")
                        .WithMany()
                        .HasForeignKey("rsgid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ohmium.Models.EFModels.Stack", "stk")
                        .WithMany()
                        .HasForeignKey("stackID");

                    b.Navigation("rsg");

                    b.Navigation("stk");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.StackPhaseSettingNew", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.Stack", "stk")
                        .WithMany()
                        .HasForeignKey("stackID");

                    b.Navigation("stk");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.StackRunProfile", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.RunProfile", "profile")
                        .WithMany("stackRunProfile")
                        .HasForeignKey("profileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ohmium.Models.EFModels.Stack", "stk")
                        .WithMany()
                        .HasForeignKey("stackID");

                    b.Navigation("profile");

                    b.Navigation("stk");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.StackRunProfileTemplate", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.RunProfileTemplate", "profile")
                        .WithMany("stackRunProfileTemplate")
                        .HasForeignKey("profileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ohmium.Models.EFModels.StatusType", "stt")
                        .WithMany()
                        .HasForeignKey("status");

                    b.Navigation("profile");

                    b.Navigation("stt");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.TSStackData", b =>
                {
                    b.HasOne("Ohmium.Models.EFModels.Device", "device")
                        .WithMany()
                        .HasForeignKey("deviceID");

                    b.HasOne("Ohmium.Models.EFModels.Stack", "smfgid")
                        .WithMany()
                        .HasForeignKey("stackMfgID");

                    b.Navigation("device");

                    b.Navigation("smfgid");
                });

            modelBuilder.Entity("Ohmium.Models.TemplateModels.RunStepLibrary", b =>
                {
                    b.HasOne("Ohmium.Models.TemplateModels.SequenceLibrary", "seqmaster")
                        .WithMany()
                        .HasForeignKey("seqMasterId");

                    b.Navigation("seqmaster");
                });

            modelBuilder.Entity("Ohmium.Models.TemplateModels.ScriptLibrary", b =>
                {
                    b.HasOne("Ohmium.Models.TemplateModels.ScriptList", "script")
                        .WithMany()
                        .HasForeignKey("scriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ohmium.Models.EFModels.StatusType", "statusType")
                        .WithMany()
                        .HasForeignKey("status")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("script");

                    b.Navigation("statusType");
                });

            modelBuilder.Entity("Ohmium.Models.TemplateModels.StackSync", b =>
                {
                    b.HasOne("Ohmium.Models.TemplateModels.ScriptList", "script")
                        .WithMany()
                        .HasForeignKey("scriptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("script");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.RunProfile", b =>
                {
                    b.Navigation("stackRunProfile");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.RunProfileTemplate", b =>
                {
                    b.Navigation("stackRunProfileTemplate");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.Site", b =>
                {
                    b.Navigation("address");

                    b.Navigation("contact");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.StackRunProfile", b =>
                {
                    b.Navigation("runStep");
                });

            modelBuilder.Entity("Ohmium.Models.EFModels.StackRunProfileTemplate", b =>
                {
                    b.Navigation("runStepTemplate");
                });
#pragma warning restore 612, 618
        }
    }
}
